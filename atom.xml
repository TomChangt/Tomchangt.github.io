<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tom&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tomchangt.github.io/"/>
  <updated>2019-06-25T14:41:45.179Z</updated>
  <id>https://tomchangt.github.io/</id>
  
  <author>
    <name>tom</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elasticsearch学习笔记(一):核心概念</title>
    <link href="https://tomchangt.github.io/2019/06/25/Elasticsearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>https://tomchangt.github.io/2019/06/25/Elasticsearch学习笔记-一-核心概念/</id>
    <published>2019-06-25T09:53:09.000Z</published>
    <updated>2019-06-25T14:41:45.179Z</updated>
    
    <content type="html"><![CDATA[<p>作者所在的公司有用到elasticsearch作为搜索引擎,之前对es的理解也仅仅是在使用层面,同时公司用到的elasticsearch版本是2.x(太老了),因此想系统的学习下elasticsearch并记录下来.本系列所用到的elasticsearch6.8.</p><a id="more"></a><h4 id="Elasticsearch简介"><a href="#Elasticsearch简介" class="headerlink" title="Elasticsearch简介"></a>Elasticsearch简介</h4><hr><h5 id="关于lucene"><a href="#关于lucene" class="headerlink" title="关于lucene"></a>关于lucene</h5><p>lucene: 最先进、功能最强大的搜索库，直接基于lucene开发，非常复杂，api复杂（实现一些简单的功能，写大量的java代码），需要深入理解原理（各种索引结构）.</p><h5 id="关于Elasticsearch"><a href="#关于Elasticsearch" class="headerlink" title="关于Elasticsearch"></a>关于Elasticsearch</h5><p>elasticsearch: 基于lucene，隐藏复杂性，提供简单易用的restful api接口、java api接口（还有其他语言的api接口）,开箱即用，优秀的默认参数，不需要任何额外设置，完全开源.</p><blockquote><ul><li>分布式的文档存储引擎</li><li>分布式的搜索引擎和分析引擎</li><li>分布式，支持PB级数据</li></ul></blockquote><p> 关于elasticsearch的一个传说，有一个程序员失业了，陪着自己老婆去英国伦敦学习厨师课程。程序员在失业期间想给老婆写一个菜谱搜索引擎，觉得lucene实在太复杂了，就开发了一个封装了lucene的开源项目，compass。后来程序员找到了工作，是做分布式的高性能项目的，觉得compass不够，就写了elasticsearch，让lucene变成分布式的系统。</p><h4 id="Elasticsearch核心概念"><a href="#Elasticsearch核心概念" class="headerlink" title="Elasticsearch核心概念"></a>Elasticsearch核心概念</h4><hr><h5 id="Near-Realtime（NRT）"><a href="#Near-Realtime（NRT）" class="headerlink" title="Near Realtime（NRT）"></a>Near Realtime（NRT）</h5><p>近实时，两个意思，从写入数据到数据可以被搜索到有一个小延迟（大概1秒）；基于es执行搜索和分析可以达到秒级.</p><h5 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h5><p>集群，包含多个节点，每个节点属于哪个集群是通过一个配置（集群名称，默认是elasticsearch）来决定的，对于中小型应用来说，刚开始一个集群就一个节点很正常.</p><h5 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h5><p>节点，集群中的一个节点，节点也有一个名称（默认是随机分配的），节点名称很重要（在执行运维管理操作的时候），默认节点会去加入一个名称为“elasticsearch”的集群，如果直接启动一堆节点，那么它们会自动组成一个elasticsearch集群，当然一个节点也可以组成一个elasticsearch集群.</p><h5 id="Document-amp-field"><a href="#Document-amp-field" class="headerlink" title="Document&amp;field"></a>Document&amp;field</h5><p>文档，es中的最小数据单元，一个document可以是一条客户数据，一条商品分类数据，一条订单数据，通常用JSON数据结构表示，每个index下的type中，都可以去存储多个document。一个document里面有多个field，每个field就是一个数据字段。</p><p><img src="01.png" alt></p><h5 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h5><p>索引，包含一堆有相似结构的文档数据，比如可以有一个客户索引，商品分类索引，订单索引，索引有一个名称。一个index包含很多document，一个index就代表了一类类似的或者相同的document。比如说建立一个product index，商品索引，里面可能就存放了所有的商品数据，所有的商品document。</p><h5 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h5><p>类型，每个索引里都可以有一个或多个type，type是index中的一个逻辑数据分类，一个type下的document，都有相同的field，比如博客系统，有一个索引，可以定义用户数据type，博客数据type，评论数据type。商品index，里面存放了所有的商品数据，商品document.但是商品分很多种类，每个种类的document的field可能不太一样，比如说电器商品，可能还包含一些诸如售后时间范围这样的特殊field；生鲜商品，还包含一些诸如生鲜保质期之类的特殊field、type、日化商品type，电器商品type，生鲜商品type.</p><h5 id="shard"><a href="#shard" class="headerlink" title="shard"></a>shard</h5><p>单台机器无法存储大量数据，es可以将一个索引中的数据切分为多个shard，分布在多台服务器上存储。有了shard就可以横向扩展，存储更多数据，让搜索和分析等操作分布到多台服务器上去执行，提升吞吐量和性能。每个shard都是一个lucene index。</p><h5 id="replica"><a href="#replica" class="headerlink" title="replica"></a>replica</h5><p>任何一个服务器随时可能故障或宕机，此时shard可能就会丢失，因此可以为每个shard创建多个replica副本。replica可以在shard故障时提供备用服务，保证数据不丢失，多个replica还可以提升搜索操作的吞吐量和性能。primary shard（建立索引时一次设置，不能修改，默认5个），replica shard（随时修改数量，默认1个），默认每个索引10个shard，5个primary shard，5个replica shard，最小的高可用配置，是2台服务器。</p><p><img src="02.png" alt></p><h5 id="elasticsearch-vs-数据库"><a href="#elasticsearch-vs-数据库" class="headerlink" title="elasticsearch vs 数据库"></a>elasticsearch vs 数据库</h5><p><img src="03.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者所在的公司有用到elasticsearch作为搜索引擎,之前对es的理解也仅仅是在使用层面,同时公司用到的elasticsearch版本是2.x(太老了),因此想系统的学习下elasticsearch并记录下来.本系列所用到的elasticsearch6.8.&lt;/p&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="https://tomchangt.github.io/categories/elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="https://tomchangt.github.io/tags/Elasticsearch/"/>
    
      <category term="JAVA" scheme="https://tomchangt.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github 博客搭建教程</title>
    <link href="https://tomchangt.github.io/2019/06/20/Hexo-Github-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>https://tomchangt.github.io/2019/06/20/Hexo-Github-博客搭建教程/</id>
    <published>2019-06-20T02:37:48.000Z</published>
    <updated>2019-06-20T07:44:04.212Z</updated>
    
    <content type="html"><![CDATA[<p>最近有想法重新开始写博客了,随着年纪越来越大,需要有些沉淀的东西.16年的时候用hexo+github搭建过博客系统,于是花了点时间重新弄了一遍.我就稍稍分享一下搭建过程,当作是我这个博客的第一篇文章.</p><a id="more"></a><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><hr><blockquote><ul><li>macOS Mojave 10.14.5</li><li>Nodejs v12.1.0</li><li>Npm v6.9.0</li><li>Git v2.20.1</li></ul></blockquote><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>因为本人本身是后端开发,加上系统用的是macOS,所有git和node都有提前装好,网上很多mac下安装git和node的教程,我这里就不阐述了.安装好git和node以后开始安装Hexo.找一个合适的目录来存放你的博客文件,比如我这里新建了一个blog文件夹来放置我的博客文件 <code>~/WorkStation/WorkStation/blog</code>,进入blog文件夹下开始安装.</p><h5 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.安装hexo"></a>1.安装hexo</h5><pre><code>npm install -g hexo-cli</code></pre><h5 id="2-初始化hexo"><a href="#2-初始化hexo" class="headerlink" title="2.初始化hexo"></a>2.初始化hexo</h5><pre><code>hexo init</code></pre><h5 id="3-安装必要组件"><a href="#3-安装必要组件" class="headerlink" title="3.安装必要组件"></a>3.安装必要组件</h5><pre><code>npm install</code></pre><p>安装完成后我本地目录结构如下:</p><p><img src="01.png" alt>    </p><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<code>http://localhost:4000/</code>，就可以访问了,效果如下:</p><p><img src="02.jpg" alt></p><h5 id="4-使用-Hexo"><a href="#4-使用-Hexo" class="headerlink" title="4.使用 Hexo"></a>4.使用 Hexo</h5><p>Hexo经常会用到的命令:</p><blockquote><ul><li>hexo clean </li><li>hexo generate</li><li>hexo server</li><li>hexo deploy</li></ul></blockquote><p>Hexo命令大多可以缩写,比如<code>hexo s 、 hexo d</code>等等.<br>更多详细命令可以参照<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">官方文档</a>.</p><h4 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h4><hr><h5 id="1-创建Repository"><a href="#1-创建Repository" class="headerlink" title="1.创建Repository"></a>1.创建Repository</h5><p>在自己的github上新建一个repository,这里注意一下我名字tomchangt,所以我的repository name要填写tomchangt.github.io,名字遵从 yourname.github.io格式,不过这里填错了也没关系,后面可以修改回来.</p><p><img src="03.png" alt></p><h5 id="2-链接github与本地"><a href="#2-链接github与本地" class="headerlink" title="2.链接github与本地"></a>2.链接github与本地</h5><p>打开terminal,然后输入下面命令:</p><pre><code>git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></pre><p>生成密钥SSH key:</p><pre><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></pre><p>然后找到刚才生成的.ssh文件下的文件<code>id_rsa.pub</code>密钥,用文本编辑器打开复制里面的内容.    </p><p><img src="04.png" alt></p><p>打开你的github,在点击<code>settings</code>,在点击<code>SSH and GPG keys</code>,新建一个ssh,名字可以随便.然后将刚才复制<code>id_rsa.pub</code>里的内容复制到key里面,点击<code>add ssh key</code>即可.</p><p><img src="05.png" alt></p><p><img src="06.png" alt></p><h5 id="3-配置本地hexo"><a href="#3-配置本地hexo" class="headerlink" title="3.配置本地hexo"></a>3.配置本地hexo</h5><p>在Hexo目录下的<code>_config.yml</code>文件下修改以下信息</p><pre><code># Deployment# Docs: http://hexo.io/docs/deployment.html  deploy:    type: git    repository: https://github.com/xxxx/xxxx.github.io.git     branch: master</code></pre><p>安装hexo deployer插件</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>执行下面命令,将hexo生成静态文件提交到github上,过一会你就可以在<code>https://xxxxxx.github.io</code>下看到博客内容了.</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><hr><p>简单的就写这么多吧,其实网上Hexo+Github建博客教程太多了,我也只是记录以下我建立博客的一个过程,并且将它当作我博客的第一篇文章,算是一个新的开始吧.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有想法重新开始写博客了,随着年纪越来越大,需要有些沉淀的东西.16年的时候用hexo+github搭建过博客系统,于是花了点时间重新弄了一遍.我就稍稍分享一下搭建过程,当作是我这个博客的第一篇文章.&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="https://tomchangt.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Hexo" scheme="https://tomchangt.github.io/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://tomchangt.github.io/tags/NexT/"/>
    
  </entry>
  
</feed>
